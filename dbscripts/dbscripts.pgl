CREATE TABLE role (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    description VARCHAR(500),
    active BOOLEAN NOT NULL DEFAULT TRUE
);

CREATE TABLE "user" (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    surname VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    phone_number VARCHAR(10),
    active BOOLEAN NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    role_id INT,
    FOREIGN KEY (role_id) REFERENCES role(id)
);

CREATE TABLE address (
    id SERIAL PRIMARY KEY,
    street_no VARCHAR(50),
    suite VARCHAR(50),
    suburb VARCHAR(255),
    province VARCHAR(255),
    postal_code VARCHAR(20),
    country VARCHAR(255)
);

CREATE TABLE employer (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    surname VARCHAR(255) NOT NULL,
    contact VARCHAR(20),
    email VARCHAR(255) UNIQUE NOT NULL,
    company_name VARCHAR(255),
    company_contact_no VARCHAR(20),
    company_email VARCHAR(255),
    industry VARCHAR(255),
    company_size VARCHAR(50),
    website VARCHAR(255),
    user_id INT NOT NULL,
    address_id INT UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    active BOOLEAN NOT NULL DEFAULT TRUE,
    FOREIGN KEY (user_id) REFERENCES "user"(id),
    FOREIGN KEY (address_id) REFERENCES address(id)
);

CREATE TABLE applicant (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    surname VARCHAR(255) NOT NULL,
    contact VARCHAR(20),
    email VARCHAR(255) UNIQUE NOT NULL,
    date_of_birth DATE,
    nationality VARCHAR(255),
    highest_level_of_education VARCHAR(255),
    resume_url VARCHAR(500),
    linked_in_url VARCHAR(500),
    user_id INT NOT NULL,
    address_id INT UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    active BOOLEAN NOT NULL DEFAULT TRUE,
    FOREIGN KEY (user_id) REFERENCES "user"(id),
    FOREIGN KEY (address_id) REFERENCES address(id)
);

CREATE TABLE education (
    id SERIAL PRIMARY KEY,
    applicant_id INT NOT NULL,
    institution VARCHAR(255) NOT NULL,
    degree VARCHAR(255),
    field_of_study VARCHAR(255),
    start_date DATE,
    end_date DATE,
    FOREIGN KEY (applicant_id) REFERENCES applicant(id)
);

CREATE TABLE experience (
    id SERIAL PRIMARY KEY,
    applicant_id INT NOT NULL,
    company_name VARCHAR(255) NOT NULL,
    job_title VARCHAR(255) NOT NULL,
    start_date DATE NOT NULL,
    end_date DATE,
    responsibilities TEXT,
    FOREIGN KEY (applicant_id) REFERENCES applicant(id)
);

CREATE TABLE skills (
    id SERIAL PRIMARY KEY,
    applicant_id INT NOT NULL,
    skill_name VARCHAR(255) NOT NULL,
    proficiency_level VARCHAR(50),
    FOREIGN KEY (applicant_id) REFERENCES applicant(id)
);

CREATE TABLE languages (
    id SERIAL PRIMARY KEY,
    applicant_id INT NOT NULL,
    language VARCHAR(255) NOT NULL,
    proficiency_level VARCHAR(50),
    FOREIGN KEY (applicant_id) REFERENCES applicant(id)
);

CREATE TABLE applicant_references (
    id SERIAL PRIMARY KEY,
    applicant_id INT NOT NULL,
    reference_name VARCHAR(255) NOT NULL,
    contact VARCHAR(20),
    email VARCHAR(255),
    relationship VARCHAR(255),
    FOREIGN KEY (applicant_id) REFERENCES applicant(id)
);

CREATE TABLE subscription_plan (
    id SERIAL PRIMARY KEY,
    plan_name VARCHAR(255) NOT NULL,
    description VARCHAR(500),
    price DECIMAL(10, 2) NOT NULL,
    duration_in_months INT NOT NULL,
    active BOOLEAN NOT NULL DEFAULT TRUE
);

CREATE TABLE subscription (
    id SERIAL PRIMARY KEY,
    user_id INT NOT NULL,
    plan_id INT NOT NULL,
    start_date TIMESTAMP NOT NULL,
    end_date TIMESTAMP NOT NULL,
    auto_renew BOOLEAN NOT NULL DEFAULT TRUE,
    active BOOLEAN NOT NULL DEFAULT TRUE,
    FOREIGN KEY (user_id) REFERENCES "user"(id),
    FOREIGN KEY (plan_id) REFERENCES subscription_plan(id)
);

CREATE TABLE billing_cycle (
    id SERIAL PRIMARY KEY,
    subscription_id INT NOT NULL,
    start_date TIMESTAMP NOT NULL,
    end_date TIMESTAMP NOT NULL,
    amount DECIMAL(10, 2) NOT NULL,
    status VARCHAR(50) NOT NULL, 
    FOREIGN KEY (subscription_id) REFERENCES subscription(id)
);

CREATE TABLE payment (
    id SERIAL PRIMARY KEY,
    billing_cycle_id INT NOT NULL,
    payment_date TIMESTAMP NOT NULL,
    amount DECIMAL(10, 2) NOT NULL,
    payment_method VARCHAR(50) NOT NULL, 
    transaction_id VARCHAR(255),
    status VARCHAR(50) NOT NULL,
    FOREIGN KEY (billing_cycle_id) REFERENCES billing_cycle(id)
);
